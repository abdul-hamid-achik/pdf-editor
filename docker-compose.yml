services:
  # PostgreSQL Database (Neon-compatible for local development)
  db:
    image: postgres:16-alpine
    container_name: pdf-editor-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-pdf_editor}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123}
      POSTGRES_DB: ${DB_NAME:-pdf_editor_development}
      # Neon-like configuration
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pdf-editor-network

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: pdf-editor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pdf-editor-network

  # MinIO for S3-compatible local storage
  minio:
    image: quay.io/minio/minio:latest
    container_name: pdf-editor-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_URL:-http://localhost:9001}
    entrypoint: sh
    command: -c '
      minio server /data --console-address ":9001" &
      MINIO_PID=$$!;
      echo "Waiting for MinIO to start...";
      until curl -sf http://127.0.0.1:9000/minio/health/live; do sleep 1; done;
      echo "MinIO started. Creating buckets...";
      mc alias set local http://127.0.0.1:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin123};
      mc mb --ignore-existing local/pdf-documents;
      mc mb --ignore-existing local/pdf-templates;
      mc mb --ignore-existing local/pdf-exports;
      mc anonymous set download local/pdf-exports;
      echo "Buckets created. MinIO is ready.";
      wait $$MINIO_PID
      '
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - pdf-editor-network

  # Rails Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pdf-editor-web
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Database
      DATABASE_URL: "postgresql://${DB_USER:-pdf_editor}:${DB_PASSWORD:-password123}@db:5432/${DB_NAME:-pdf_editor_development}"
      # Redis
      REDIS_URL: "redis://redis:6379/1"
      # Storage
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      AWS_REGION: us-east-1
      AWS_BUCKET: pdf-documents
      AWS_ENDPOINT: http://minio:9000
      AWS_FORCE_PATH_STYLE: "true"
      # Rails Development
      RAILS_ENV: development
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      WEB_CONCURRENCY: 1
      RAILS_MAX_THREADS: 5
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      BOOTSNAP_CACHE_DIR: /tmp/bootsnap
      HISTFILE: /app/log/.bash_history
      EDITOR: vi
    volumes:
      # Mount source code for hot reload
      - .:/app:cached
      # Persist bash history
      - ./log/.bash_history:/root/.bash_history
      # Cache volumes for performance
      - bundle_cache:/usr/local/bundle
      - node_modules:/app/node_modules
      - rails_cache:/app/tmp/cache
      - rails_storage:/app/storage
      # Exclude tmp directory from mount
      - /app/tmp
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails server -b '0.0.0.0'"
    stdin_open: true
    tty: true
    networks:
      - pdf-editor-network

  # Sidekiq for background jobs (optional - for async PDF generation)
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pdf-editor-sidekiq
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: "postgresql://${DB_USER:-pdf_editor}:${DB_PASSWORD:-password123}@db:5432/${DB_NAME:-pdf_editor_development}"
      # Redis
      REDIS_URL: "redis://redis:6379/1"
      # Storage
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      AWS_REGION: us-east-1
      AWS_BUCKET: pdf-documents
      AWS_ENDPOINT: http://minio:9000
      AWS_FORCE_PATH_STYLE: "true"
      # Rails Development
      RAILS_ENV: development
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    volumes:
      - .:/app:cached
      - bundle_cache:/usr/local/bundle
      - rails_storage:/app/storage
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: bundle exec sidekiq
    networks:
      - pdf-editor-network

  # Mailhog for email testing in development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: pdf-editor-mailhog
    restart: unless-stopped
    networks:
      - pdf-editor-network

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pdf-editor-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pdf-editor-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  bundle_cache:
    driver: local
  node_modules:
    driver: local
  rails_cache:
    driver: local
  rails_storage:
    driver: local
  pgadmin_data:
    driver: local

networks:
  pdf-editor-network:
    driver: bridge