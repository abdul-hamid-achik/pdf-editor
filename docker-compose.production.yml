# Production Docker Compose configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.production.yml up
version: '3.8'

services:
  # Neon Database connection for production
  # Note: In production, you would typically use managed Neon service
  db:
    image: neondatabase/neon:latest
    container_name: pdf-editor-neon-db
    ports:
      - "5432:5432"
    environment:
      NEON_API_KEY: ${NEON_API_KEY}
      NEON_PROJECT_ID: ${NEON_PROJECT_ID}
      BRANCH_ID: ${NEON_BRANCH_ID}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - neon_data:/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  web:
    image: pdf-editor:production
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RAILS_ENV: production
        RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    environment:
      RAILS_ENV: production
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      # Use actual S3/R2 in production
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET: ${AWS_BUCKET}
      # Remove MinIO endpoint override for production S3
      # AWS_ENDPOINT: ${AWS_ENDPOINT}
    volumes:
      # Only mount storage directory in production
      - rails_storage:/app/storage
      - rails_log:/app/log
    command: bash -c "bundle exec rails db:migrate && bundle exec rails server -b '0.0.0.0'"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M

  sidekiq:
    image: pdf-editor:production
    environment:
      RAILS_ENV: production
      RAILS_MAX_THREADS: ${SIDEKIQ_CONCURRENCY:-10}
    volumes:
      - rails_storage:/app/storage
      - rails_log:/app/log
    command: bundle exec sidekiq -C config/sidekiq.yml
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: pdf-editor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - rails_public:/app/public:ro
    depends_on:
      web:
        condition: service_healthy
    restart: always
    networks:
      - pdf-editor-network

  # Remove development-only services
  mailhog:
    profiles:
      - never

  pgadmin:
    profiles:
      - never

  # MinIO not needed in production (using real S3/R2)
  minio:
    profiles:
      - never

  minio-init:
    profiles:
      - never

volumes:
  neon_data:
    driver: local
  rails_storage:
    driver: local
  rails_log:
    driver: local
  rails_public:
    driver: local